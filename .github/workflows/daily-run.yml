name: Daily Data Fetch and Hugo Build

on:
  workflow_dispatch: # 允许手动触发, 以便测试
  schedule:
    - cron: '0 22 * * *' # 每天 UTC 22 点执行

jobs:
  build-and-deploy:
    runs-on: ubuntu-22.04
    permissions:
      contents: write

    steps:
      # 步骤 1: 检出工具仓库 (您当前的项目)
      - name: Checkout Tooling Repository
        uses: actions/checkout@v4

      # 步骤 2: 检出 Hugo 内容仓库到 hugo_source 目录
      - name: Checkout Hugo Content Repository
        uses: actions/checkout@v4
        with:
          repository: ${{ secrets.PAGES_REPO_URL }} # 请确保这个 secret 指向您的 Hugo 仓库
          path: hugo_source
          token: ${{ secrets.GH_PAT }} # 请确保这个 secret 是有权限访问仓库的 PAT

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v2
        with:
          hugo-version: 'latest'

      # 步骤 3: 运行脚本
      - name: Install Dependencies and Run Scripts
        run: |
          # 安装 Python 依赖
          pip install -r requirements.txt
          
          # 安装 Playwright 的浏览器和系统依赖
          playwright install --with-deps
          
          # 运行主脚本
          python run_all_daily.py
        env:
          # 这个环境变量是连接两个仓库的关键
          HUGO_PROJECT_PATH: ${{ github.workspace }}/hugo_source
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          OPENAI_API_BASE: ${{ secrets.OPENAI_API_BASE }}
          GH_PAT: ${{ secrets.GH_PAT }}
          # 删除未使用的SEATABLE相关环境变量
          # 添加这两个环境变量，用于auto_push_github.py脚本
          PAGES_REPO_URL: ${{ secrets.PAGES_REPO_URL }}
          PAGES_BRANCH: ${{ secrets.PAGES_BRANCH }}

      # 步骤 4: 检查结果 (可选，但建议保留)
      - name: Verify Generated Content
        run: |
          echo "--- Verifying generated content in hugo_source/content/post ---"
          ls -lR ${{ github.workspace }}/hugo_source/content/post